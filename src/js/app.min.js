/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _myClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./myClass */ "./src/js/myClass.js");


$(document).ready(function(){
    let settings = {
        normalFontWeight: 400, 
        activeFontWeight: 900, 
        normalGameObjectCharacterColor: "#535353",
        activeGameObjectCharacterColor: "green",
        normalFontSize: 1.2,
        activeFontSize: 1.5,
        spawnSpeed: 3000,
        timerInSeconds: 200,
        maxNumOfCharacters: 5
    };
    
    //enable
    let textarea = document.getElementById("interactiveTextArea");
    let characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz123456789";
    let textToType;
    let paused = true;
    //init
    let manager = new _myClass__WEBPACK_IMPORTED_MODULE_0__["GameManager"]();
    let pooler = new _myClass__WEBPACK_IMPORTED_MODULE_0__["ObjectPooler"]();
    let spawner = new _myClass__WEBPACK_IMPORTED_MODULE_0__["CharacterSpawner"](pooler); 
    let timer = new _myClass__WEBPACK_IMPORTED_MODULE_0__["Timer"](settings.timerInSeconds);
    let spawnIntervalId;
    let timerIntervalId;
    let keyLog = [];
 
    //set start program
    onStart();
    
    //IIFE
    //fixed update
    (function(){
        //let arrObj = Array.from(pooler.ObjectSet);
        setInterval(function(){
            if(!paused){
                if(Array.from(pooler.ObjectSet).filter(x => x.Active == true).length == 17 ||
                    timer.CountDownInSeconds == 0){
                    console.log("Game Over");
                   
                    gameOver();
                    $("#gameover-screen").hide().fadeIn(800);
                }
                // console.log(Array.from(pooler.ObjectSet).filter(x => x.Active == true).length);
                // console.log(timer.CountDownInSeconds);
            } 
            
        }, 20); //every 0.02s
    })();
    //main
    function startMainInterval(){
        spawnIntervalId = setInterval(function(){
            if(!paused){
                textToType = randomString();
                manager._numberOfSpawn +=1;
                spawner.Spawn(textToType);
            } 
            
        }, manager.GameSpeed);
            
            //timer 
        timerIntervalId =  setInterval(function(){
            if(timer.Start == true){
                timer.CountDown();
                document.getElementById("timer").children[1].
                textContent = (timer.Minutes < 10? "0":"") + "" + timer.Minutes + ":" + (timer.Seconds <10?"0":"") + timer.Seconds;
            }
        },1000);
    }
    function stopMainInterval(){
        if(spawnIntervalId != null){
            clearInterval(spawnIntervalId);
            clearInterval(timerIntervalId);
            spawnIntervalId = 0;
            timerIntervalId = 0;
        }
            
    }
    //keypress
    $(textarea).keydown(function(e){
        backSpace(e, 37);
        backSpace(e, 39);
        if(e.keyCode === 8){
            //do not use backspace button function
            return false;
        }
        if(e.which == 37 || e.which == 39){
            this.value = this.value.substr(0,this.value.length-1);
            
        }
        if(e.which == 38 || e.which == 40){
            this.value = "";
            for(let item of pooler.ObjectSet.values()){
                for(let i=0; i<keyLog.length; i++){
                    //if keylog is greater
                    if(item.Id.substr(0, keyLog.length > settings.maxNumOfCharacters? settings.maxNumOfCharacters:keyLog.length) == keyLog.join('')){
                        highLightText(item.Id,i,settings.normalGameObjectCharacterColor, settings.normalFontWeight, settings.normalFontSize);
                    }
                }
            }
            keyLog = [];
        }
    });

    $(textarea).keyup(function(e){
        // backSpace(e, 8);
        if(e.which == 37){
           //make caret always in the end of the text value
            this.selectionEnd = this.selectionEnd + 1;
            let del = this.value.substr(this.selectionEnd-1, 1);
            this.value = this.value.substr(0,this.value.length-1);
            this.selectionEnd = this.selectionEnd + 1;
            this.value += del;
        }
    });

    $(textarea).keypress(function(e){
       
        if(e.which == 13){
            let content = this.value;
            let lastLine = content.substr(content.lastIndexOf("\n")+1);
            checkAnswer(lastLine);
        }

        if((e.which >= 65 && e.which <= 96) || (e.which >= 97 && e.which <= 126) || (e.which >= 32 && e.which<=64)){
            try {
                keyLog.push(String.fromCodePoint(e.which));
                for(let item of pooler.ObjectSet.values()){
                    for(let i=0; i<keyLog.length && item.Active; i++){
                        if(item.Id.substr(0, keyLog.length) == keyLog.join('')){
                            highLightText(item.Id,i,settings.activeGameObjectCharacterColor, settings.activeFontWeight, settings.activeFontSize);
                        }else{
                            highLightText(item.Id,i,settings.normalGameObjectCharacterColor, settings.normalFontWeight, settings.normalFontSize);
                        }
                    }
                }
                console.log(keyLog.join(''));
            }
            catch(err) {
                //game object dom child looked into pooler object set where its dom is already removed
                //or index is out of range
                //game will continue
                console.log(keyLog.join(''));
                console.log("ERROR");
                for(let item of pooler.ObjectSet.values()){
                    if(item.Active){
                        let _log = "";
                        for(let i=0; i<item.Id.length; i++){
                            _log += keyLog[i];
                        }
                        console.log("_log " + _log);
                        if(item.Id == _log){
                            for(let i=0; i<item.Id.length; i++){
                                highLightText(item.Id,i,settings.normalGameObjectCharacterColor, settings.normalFontWeight, settings.normalFontSize);
                            }
                        }
                    }
                }
            }
        }
    });

    //app functions
    function backSpace(e, key){
        if(e.which == key){
            let content = textarea.value;
            //let lastLine = content.substr(content.lastIndexOf("\n")+1);
            if(keyLog.length > 0){
                //set game object dom last index to normal
                for(let item of pooler.ObjectSet.values()){
                    for(let i=0; i<keyLog.length; i++){
                        if(item.Id.substr(0, keyLog.length) == keyLog.join('')){
                            highLightText(item.Id,keyLog.length-1, settings.normalGameObjectCharacterColor, settings.normalFontWeight, settings.normalFontSize);
                        }
                    }
                }
                keyLog.pop();
            }
            //set game object dom to active
            for(let item of pooler.ObjectSet.values()){
                for(let i=0; i<keyLog.length; i++){
                    if(item.Id.substr(0, keyLog.length) == keyLog.join('')){
                        highLightText(item.Id,i,settings.activeGameObjectCharacterColor, settings.activeFontWeight, settings.activeFontSize);
                    }
                }
            }
            
        }
    }

    function checkAnswer(value){
        let found = false;
        //console.log(pooler.ObjectSet);
        for(const obj of pooler.ObjectSet.values()){
            if(obj.Id == value && obj.Active){
                obj.Active = false;
                found = true;
                document.getElementById(obj.Id).remove();
                manager.HitIncrease();
                document.getElementById("hit").children[1].textContent = manager.Hit;
                keyLog = [];
                console.log("correct!");
                break;
            }
        }
        if(!found){
            manager.MissIncrease();
            document.getElementById("miss").children[1].textContent = manager.Miss;
            //set game object dom to normal 
            for(let item of pooler.ObjectSet.values()){
                if(keyLog.length <= item.Id.length){
                    if(item.Id.substr(0, keyLog.length) == keyLog.join('') && item.Active){
                        for(let i=0; i<keyLog.length; i++){
                            highLightText(item.Id,i,settings.normalGameObjectCharacterColor, settings.normalFontWeight, settings.normalFontSize);
                        }
                    }
                }else{
                    let _log;
                    for(let i=0; i<item.Id.length; i++){
                        _log += keyLog[i];
                    }
                    if(item.Id == _log && item.Active){
                        for(let i=0; i<item.Id.length; i++){
                            highLightText(item.Id,i,settings.normalGameObjectCharacterColor, settings.normalFontWeight, settings.normalFontSize);
                        }
                    }
                }
                
              
            }
            console.log("wrong!");
        }
        //clear key log for new input line
        keyLog = [];
    }
   
    function randomString(){
        let arr=[];
        for(let i=0; i<settings.maxNumOfCharacters; i++){
           arr.push(characters.charAt(Math.floor(Math.random() * characters.length)));
        }
        return arr.join('');
    }

    function highLightText(elementId, index, mycolor, font_weight, font_size)
    {
        // console.log("WUT? " + elementId);
       
        let objectElement = document.getElementById(elementId);
        let span = objectElement.children[index]; //get p.span
        span.style.color = mycolor;
        span.style.fontWeight = font_weight;
        span.style.fontSize = font_size + "em";
    }

    function gameOver(){
        let screen = document.getElementById("gameover-screen");
        screen.style.display = "block";
        timer.Start = false;
        paused = true;
        document.getElementById("hit-go").children[1].textContent = manager.Hit;
        document.getElementById("miss-go").children[1].textContent = manager.Miss;
       // screen.getElementsByClassName("modal").style.display = "block";
      
    }
    function playAgain(){
       //reload
       location.reload();
    }
    //execution
    function onStart(){
        timer.Start = false;
        paused = true;
        manager.GameSpeed = settings.spawnSpeed;
        textarea.disabled = true;
        document.getElementById("timer").children[1].
        textContent = (timer.Minutes < 10? "0":"") + "" + timer.Minutes + ":" + (timer.Seconds <10?"0":"") + timer.Seconds;
    }
    

    //DOM events
    $("#play-again").click(function(){
        playAgain();
    });
    $("#ui-control-play").click(function() {
        paused = paused == true? false : true;
        timer.Start = timer.Start == true? false:true;
        //spawn first characeters
        if(!paused && timer.Start == true){
            textToType = randomString();
            manager._numberOfSpawn +=1;
            spawner.Spawn(textToType);
            textarea.disabled = false;
            textarea.focus();
            document.getElementById("manual-container").style.display = "none";
        }else{
            textarea.disabled = true;
        }
       //restart intervals
       stopMainInterval();
       startMainInterval();
        
       
    });
});

/***/ }),

/***/ "./src/js/myClass.js":
/*!***************************!*\
  !*** ./src/js/myClass.js ***!
  \***************************/
/*! exports provided: GameManager, GameObject, Character, ObjectPooler, CharacterSpawner, Timer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GameManager", function() { return GameManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GameObject", function() { return GameObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Character", function() { return Character; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectPooler", function() { return ObjectPooler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CharacterSpawner", function() { return CharacterSpawner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Timer", function() { return Timer; });
class GameManager{
    constructor(){
        this._numberOfSpawn = 0;
        this._gameSpeed = 250;
        this._hit = 0;
        this._miss = 0;
    }
    get Hit(){
        return this._hit;
    }
    HitIncrease(){
        this._hit++;
    }
    get Miss(){
        return this._miss;
    }
    MissIncrease(){
        this._miss++;
    }
    get GameSpeed(){
        return this._gameSpeed;
    }
    set GameSpeed(value){
        this._gameSpeed = value;
    }
    get numberOfSpawn(){
        return this.numberOfSpawn;
    }
    set numberOfSpawn(numberOfSpawn){
        this._numberOfSpawn = numberOfSpawn;
    }
}
class GameObject{
    constructor(){
        this._active = true;
        this._name = "gameObject";
    }
    get Active(){
        return this._active;
    }
    set Active(value){
        this._active = value;
    }
    get Name(){
        return this._name;
    }
    set Name(value){
        this._name = value;
    }
}
class Character extends GameObject{
    constructor(id){
        super();
        this._id = id;
    }
    get Id(){
        return this._id;
    }
    set Id(value){
        this.id =value;
    }
}
class ObjectPooler{
    constructor(){
        this._setObject = new Set();
    }
  
    get ObjectSet(){
        return this._setObject;
    }
    set ObjectSet(value){
        this._setObject = value;
    }
    Pool(character){
        this._setObject.add(character);
    }
}
class CharacterSpawner{
    constructor(pooler){
      this._pooler = pooler;
    }
   
     Spawn(characters) {
        let display = document.getElementById("main-display");
        let para = document.createElement("p"); //span container
        para.classList.add("character-game-object");
        para.id = characters;
       
        for(let i=0; i<characters.length; i++){
            let span = document.createElement("span");
            let node = document.createTextNode(characters.charAt(i)); 
            span.appendChild(node);
            span.style.color = "#535353";
            span.style.fontSize = "1.2em";
            span.style.fontWeight = 400;
            para.appendChild(span);  
        }
       
        display.appendChild(para);

        let _obj = null;
      
        for(const obj of this._pooler.ObjectSet.values()){
            if(obj.Active == false){
                obj.Active = true;
                obj._id = characters;
                _obj = obj;
                break;
            }
        }
        if(_obj == null){
            this._pooler.Pool(new Character(characters));
        }
    }
}
class Timer{
    constructor(countDownInSec){
        this._tempCountDownInsec = countDownInSec;
        this._countDownInSec = countDownInSec;
        this._minutes = Math.floor(countDownInSec / 60);
        this._seconds = countDownInSec - (this._minutes * 60);
        this._start = false;
    }

    CountDown(){
        //setInterval(function(){
            this._countDownInSec = this._countDownInSec < 0? 0:this._countDownInSec -= 1;
            if(this._countDownInSec >= 0){
                this._minutes = Math.floor(this._countDownInSec / 60);
                this._seconds = this._countDownInSec - (this._minutes * 60);
            }else{
                this._start = false;
                //add listener
            }
           
            //console.log(this._countDownInSec);

        //},1000);
    }
    Start(){
        this._start = true;
    }
    Pause(){
        this._start = false;
    }
    Reset(){
        this._start = false;
        this._countDownInSec = this._tempCountDownInsec;
        this._minutes = Math.floor(countDownInSec / 60);
        this._seconds = countDownInSec - (this._minutes * 60);
    }
    get Minutes(){
        return this._minutes < 0? 0:this._minutes;
    }
    get Seconds(){
        return this._seconds < 0? 0:this._seconds;
    }
    get CountDownInSeconds(){
        return this._countDownInSec;
    }
    
}


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,